{"meta":{"title":"OlIv Blog","subtitle":"All about Drupal development","description":null,"author":"Oleksandr Ivanchenko","url":"https://alexsergivan.github.io"},"pages":[],"posts":[{"title":"Work with database in Drupal 8","slug":"Work-with-database-in-Drupal-8","date":"2016-07-08T08:34:24.000Z","updated":"2016-07-08T09:19:18.000Z","comments":true,"path":"2016/07/08/Work-with-database-in-Drupal-8/","link":"","permalink":"https://alexsergivan.github.io/2016/07/08/Work-with-database-in-Drupal-8/","excerpt":"","text":"For creating database queries in Drupal 8, we should add dependency to ´Drupal\\Core\\Database\\Connection´ class inside our class.123456789101112131415161718192021222324252627282930&lt;?phpnamespace Drupal\\our_custom_module_name;use Drupal\\Core\\Database\\Connection;/** * Our class, where we will communicate with database. */class LetsTalkWithDatabase &#123; /** * @var \\Drupal\\Core\\Database\\Connection */ protected $database; /** * Construct. */ public function __construct(Connection $database) &#123; $this-&gt;database = $database; &#125; /** * Create function. */ public static function create(ContainerInterface $container) &#123; return new static( $container-&gt;get('database') ); &#125;&#125;","categories":[],"tags":[{"name":"Drupal 8","slug":"Drupal-8","permalink":"https://alexsergivan.github.io/tags/Drupal-8/"},{"name":"database","slug":"database","permalink":"https://alexsergivan.github.io/tags/database/"},{"name":"mysql","slug":"mysql","permalink":"https://alexsergivan.github.io/tags/mysql/"}]},{"title":"How to add a custom validation for the custom entity?","slug":"how-to-add-custom-validation-to-entity","date":"2016-07-07T09:17:39.000Z","updated":"2016-07-08T07:58:38.000Z","comments":true,"path":"2016/07/07/how-to-add-custom-validation-to-entity/","link":"","permalink":"https://alexsergivan.github.io/2016/07/07/how-to-add-custom-validation-to-entity/","excerpt":"","text":"Hello! In this article I would like to describe how we can add custom validationfor our custom entity type.Let’s use a ´our_custom_module_name´ module, as example, to create an entity validation,which will check if we have the same entity already (with the same title). Inside the module folder we should create a constraint: Constraints in Drupal 8 are also plugins which usually hold a small amount of information about how data is actually being validated, what error message should be used in case of failure and any additional options the validator needs. /our_custom_module_name/src/Plugin/Validation/Constraint/ExistsEntityWithNameConstraint.php 1234567891011121314151617181920212223242526272829&lt;?php/** * @file * Contains \\Drupal\\our_custom_module_name\\Plugin\\Validation\\Constraint\\ExistsEntityWithNameConstraint. */namespace Drupal\\our_custom_module_name\\Plugin\\Validation\\Constraint;use Symfony\\Component\\Validator\\Constraint;/** * Constraint for checking if a default entity already exists. * * @Constraint( * id = \"ExistsEntityWithName\", * label = @Translation(\"Entity exists\", context = \"Validation\"), * type = &#123; \"entity\" &#125; * ) */class ExistsEntityWithNameConstraint extends Constraint &#123; /** * Message shown when the entity already exists. * * @var string */ public $messageExists = 'Entity %entity already exists';&#125; Next, we should create a validator class, where all our validation logic should be placed: The validator class (which is referenced by the constraint) is responsible for checking the data. /our_custom_module_name/src/Plugin/Validation/Constraint/ExistsEntityWithNameConstraintValidator.php 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?php/** * @file * Contains \\Drupal\\our_custom_module_name\\Plugin\\Validation\\Constraint\\ExistsEntityWithNameConstraintValidator. */namespace Drupal\\our_custom_module_name\\Plugin\\Validation\\Constraint;use Drupal\\Core\\DependencyInjection\\ContainerInjectionInterface;use Drupal\\Core\\Entity\\EntityTypeManager;use Symfony\\Component\\DependencyInjection\\ContainerInterface;use Symfony\\Component\\Validator\\Constraint;use Symfony\\Component\\Validator\\ConstraintValidator;/** * Validates the ExistsEntityWithNameConstraint. */class ExistsEntityWithNameConstraintValidator extends ConstraintValidator implements ContainerInjectionInterface &#123; /** * Validator 2.5 and upwards compatible execution context. * * @var \\Symfony\\Component\\Validator\\Context\\ExecutionContextInterface */ protected $context; /** * @var \\Drupal\\Core\\Entity\\EntityTypeManager */ protected $entityTypeManager; /** * Constructs a new ExistsEntityWithNameConstraintValidator. * * @param \\Drupal\\Core\\Entity\\EntityTypeManager * The user storage handler. */ public function __construct(EntityTypeManager $entity_type_manager) &#123; $this-&gt;entityTypeManager = $entity_type_manager; &#125; /** * &#123;@inheritdoc&#125; */ public static function create(ContainerInterface $container) &#123; return new static($container-&gt;get('entity_type.manager')); &#125; /** * &#123;@inheritdoc&#125; * * Here we validate entities and check if the same entity * (with the same name) already exists. */ public function validate($entity, Constraint $constraint) &#123; $name = $entity-&gt;name-&gt;value; if (isset($name)) &#123; $entity_storage = $this-&gt;entityTypeManager-&gt;getStorage($entity-&gt;bundle()); // Check if we already have the same entity. $ex_entity = $entity_storage-&gt;loadByProperties(array('name'=&gt; $name)); if (!empty($ex_entity) &amp;&amp; is_array($ex_entity)) &#123; // Takes entity id. $ex_entity_id = array_shift($ex_entity)-&gt;id(); // If we just update the same entity, then skip validation. if ($entity-&gt;id() != $ex_entity_id) &#123; $this-&gt;context-&gt;buildViolation($constraint-&gt;messageExists, array( '%entity' =&gt; $name )) -&gt;atPath('name') -&gt;addViolation(); &#125; &#125; &#125; &#125;&#125; And last step. We should add annotation to our custom entity to use this validation:12345...constraints = &#123; \"ExistsEntityWithName\" = &#123;&#125;&#125;...","categories":[],"tags":[{"name":"Drupal 8","slug":"Drupal-8","permalink":"https://alexsergivan.github.io/tags/Drupal-8/"},{"name":"validation","slug":"validation","permalink":"https://alexsergivan.github.io/tags/validation/"},{"name":"entity","slug":"entity","permalink":"https://alexsergivan.github.io/tags/entity/"},{"name":"constraint","slug":"constraint","permalink":"https://alexsergivan.github.io/tags/constraint/"}]}]}